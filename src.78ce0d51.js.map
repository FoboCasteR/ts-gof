{"version":3,"sources":["src/cellState.ts","src/gameLoop.ts","src/gameBoard.ts","src/gameOfLife.ts","src/renderer.ts","src/index.ts"],"names":[],"mappings":";AAAA,aAAA,IAAkB,EAAlB,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAAA,SAAkB,GAChB,EAAA,EAAA,KAAA,GAAA,OACA,EAAA,EAAA,MAAA,GAAA,QAFF,CAAkB,EAAA,QAAA,YAAA,QAAA,UAAS;;ACGd,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,EAAb,IAAA,EAAA,WAME,SAAA,EAAoB,EAA0B,GAA9C,IAAA,EAAA,KAAoB,KAAA,KAAA,EAA0B,KAAA,SAAA,EAJtC,KAAA,UAAW,EAwCnB,KAAA,UAAY,WACV,EAAK,QAET,OArCE,EAAA,UAAA,MAAA,WACO,KAAA,UAAW,EACX,KAAA,WAAa,KAAK,MAClB,KAAA,UAAY,OAAO,sBAAsB,KAAK,YAGrD,EAAA,UAAA,KAAA,WACO,KAAA,UAAW,EAChB,OAAO,qBAAqB,KAAK,YAGnC,EAAA,UAAA,OAAA,WACM,KAAK,SACF,KAAA,OAEA,KAAA,SAIT,EAAA,UAAA,KAAA,WACQ,IAAA,EAAgB,KAAK,MACP,EAAgB,KAAK,YAEtB,EAAS,aACrB,KAAA,KAAK,SACL,KAAA,SAAS,OAAO,KAAK,KAAK,YAC1B,KAAA,WAAa,GAGhB,KAAK,WACF,KAAA,UAAY,OAAO,sBAAsB,KAAK,aArChD,EAAA,WAAa,GA4CtB,EA7CA,GAAa,QAAA,SAAA;;ACDA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAFb,IAAA,EAAA,QAAA,eAEA,EAAA,WAGE,SAAA,EAAqB,EAAwB,GAAxB,KAAA,MAAA,EAAwB,KAAA,OAAA,EACtC,KAAA,KAAO,IAAI,MAAM,GACjB,IAAA,IAAI,EAAI,EAAG,EAAI,EAAQ,IACrB,KAAA,KAAK,GAAK,IAAI,MAAM,GAAO,KAAK,EAAA,UAAU,MAsCrD,OAlCE,EAAA,UAAA,gBAAA,SAAgB,EAAW,GACnB,IAeE,EAfA,EAAwB,KAApB,KAEN,EAAc,EAFY,KAAZ,OAEa,EAC3B,EAAkB,IAAN,EACZ,EAAa,EAJa,KAAL,MAII,EAE3B,EAAU,EALS,IAAN,IASf,IADM,EAAM,EAAK,EAAI,IACN,GACX,IAAW,GAAW,EAAI,EAAI,IAC9B,IAAY,GAAW,EAAI,EAAI,KAEjC,IAEF,IADM,EAAM,EAAK,EAAI,IACN,GACX,IAAW,GAAW,EAAI,EAAI,IAC9B,IAAY,GAAW,EAAI,EAAI,KAK9B,OAHH,IAAW,GAAW,EAAK,GAAG,EAAI,IAClC,IAAY,GAAW,EAAK,GAAG,EAAI,IAEhC,GAGT,EAAA,UAAA,SAAA,SAAS,EAAW,GACX,OAAA,KAAK,KAAK,GAAG,IAGtB,EAAA,UAAA,SAAA,SAAS,EAAW,EAAW,GACxB,KAAA,KAAK,GAAG,GAAK,GAEtB,EA5CA,GAAa,QAAA,UAAA;;ACCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gBAAA,EAHb,IAAA,EAAA,QAAA,eACA,EAAA,QAAA,eAEA,EAAA,WAIE,SAAA,EAAY,EAAe,GACpB,KAAA,aAAe,IAAI,EAAA,UAAU,EAAO,GACpC,KAAA,eAAiB,IAAI,EAAA,UAAU,EAAO,GA6B/C,OA1BE,EAAA,UAAA,OAAA,WAGO,IAFC,IAAgB,EAAqC,KAAhC,aAAkB,EAAc,KAAL,eAE7C,EAAI,EAAG,EAAI,EAAM,MAAO,IAC1B,IAAA,IAAI,EAAI,EAAG,EAAI,EAAM,OAAQ,IAAK,CAC/B,IAAA,EAAa,EAAM,gBAAgB,EAAG,GAEzB,IAAf,EACF,EAAU,SAAS,EAAG,EAAG,EAAM,SAAS,EAAG,IACnB,IAAf,EACT,EAAU,SAAS,EAAG,EAAG,EAAA,UAAU,OAEnC,EAAU,SAAS,EAAG,EAAG,EAAA,UAAU,MAQlC,OAHF,KAAA,aAAe,EACf,KAAA,eAAiB,EAEf,MAGT,EAAA,UAAA,SAAA,WACS,OAAA,KAAK,cAEhB,EAnCA,GAAa,QAAA,WAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,EAHb,IAAA,EAAA,QAAA,eAGA,EAAA,WAGE,SAAA,EAAY,GACJ,IAAA,EAAM,EAAO,WAAW,MAE9B,EAAI,MAAM,EAAG,GACb,EAAI,uBAAwB,EAEvB,KAAA,IAAM,EAgCf,OA7BE,EAAA,UAAA,OAAA,SAAO,GAQA,IAPC,IAAA,EAAY,KAAK,IAAI,aACzB,EACA,EACA,EAAU,MACV,EAAU,QAGH,EAAI,EAAG,EAAI,EAAU,OAAQ,IAC/B,IAAA,IAAI,EAAI,EAAG,EAAI,EAAU,MAAO,IAAK,CACpC,IAAA,EAAoC,GAA3B,EAAI,EAAU,MAAQ,GAE/B,EAAU,SAAS,EAAG,KAAO,EAAA,UAAU,OACzC,EAAU,KAAK,GAAS,IACxB,EAAU,OAAO,GAAS,IAC1B,EAAU,OAAO,GAAS,MAE1B,EAAU,KAAK,GAAS,EACxB,EAAU,OAAO,GAAS,EAC1B,EAAU,OAAO,GAAS,GAG5B,EAAU,OAAO,GAAS,IAIzB,KAAA,IAAI,aAAa,EAAW,EAAG,GAC/B,KAAA,IAAI,UAAU,KAAK,IAAI,OAAQ,EAAG,IAE3C,EAzCA,GAAa,QAAA,SAAA;;ACeb,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAlBA,IAAA,EAAA,QAAA,eAEA,EAAA,QAAA,cACA,EAAA,QAAA,gBACA,EAAA,QAAA,cAEA,SAAS,EAAQ,GACV,IAAA,IAAI,EAAI,EAAG,EAAI,EAAM,OAAQ,IAC3B,IAAA,IAAI,EAAI,EAAG,EAAI,EAAM,MAAO,IAC/B,EAAM,SACJ,EACA,EACA,KAAK,MAAsB,GAAhB,KAAK,UAAiB,EAAA,UAAU,KAAO,EAAA,UAAU,OAMpE,OAAO,iBAAiB,mBAAoB,WACpC,IAGA,EAAS,SAAS,eAAe,UACvC,EAAO,OAHQ,IAIf,EAAO,MALO,IAOR,IAAA,EAAW,IAAI,EAAA,SAAS,GACxB,EAAO,IAAI,EAAA,WAAW,IAAK,KACjC,EAAQ,EAAK,YAEP,IAAA,EAAO,IAAI,EAAA,SAAS,EAAM,GAEhC,SAAS,eAAe,iBAAiB,QAAU,WACjD,EAAK,UAGP,SAAS,eAAe,eAAe,QAAU,WAC/C,EAAK,OACL,EAAK,QAGP,SAAS,eAAe,kBAAkB,QAAU,WAClD,EAAQ,EAAK","file":"src.78ce0d51.js","sourceRoot":"..","sourcesContent":["export const enum CellState {\n  Dead = 0,\n  Alive = 1,\n}\n","import { GameOfLife } from './gameOfLife';\nimport { Renderer } from './renderer';\n\nexport class GameLoop {\n  static msPerFrame = 16;\n  private isRunned = false;\n  private requestId: number;\n  private lastTickTs: number;\n\n  constructor(private game: GameOfLife, private renderer: Renderer) {}\n\n  start(): void {\n    this.isRunned = true;\n    this.lastTickTs = Date.now();\n    this.requestId = window.requestAnimationFrame(this.boundTick);\n  }\n\n  stop(): void {\n    this.isRunned = false;\n    window.cancelAnimationFrame(this.requestId);\n  }\n\n  toggle(): void {\n    if (this.isRunned) {\n      this.stop();\n    } else {\n      this.start();\n    }\n  }\n\n  tick(): void {\n    const currentTickTs = Date.now();\n    const elapsedTime = currentTickTs - this.lastTickTs;\n\n    if (elapsedTime >= GameLoop.msPerFrame) {\n      this.game.update();\n      this.renderer.render(this.game.getBoard());\n      this.lastTickTs = currentTickTs;\n    }\n\n    if (this.isRunned) {\n      this.requestId = window.requestAnimationFrame(this.boundTick);\n    }\n  }\n\n  boundTick = (): void => {\n    this.tick();\n  };\n}\n","import { CellState } from './cellState';\n\nexport class GameBoard {\n  private data: CellState[][];\n\n  constructor(readonly width: number, readonly height: number) {\n    this.data = new Array(height);\n    for (let y = 0; y < height; y++) {\n      this.data[y] = new Array(width).fill(CellState.Dead);\n    }\n  }\n\n  countNeighbours(x: number, y: number): number {\n    const { data, height, width } = this;\n    const checkTop = y !== 0;\n    const checkBottom = y < height - 1;\n    const checkLeft = x !== 0;\n    const checkRight = x < width - 1;\n\n    let counter = 0;\n\n    if (checkTop) {\n      const row = data[y - 1];\n      counter += row[x];\n      if (checkLeft) counter += row[x - 1];\n      if (checkRight) counter += row[x + 1];\n    }\n    if (checkBottom) {\n      const row = data[y + 1];\n      counter += row[x];\n      if (checkLeft) counter += row[x - 1];\n      if (checkRight) counter += row[x + 1];\n    }\n    if (checkLeft) counter += data[y][x - 1];\n    if (checkRight) counter += data[y][x + 1];\n\n    return counter;\n  }\n\n  getState(x: number, y: number): CellState {\n    return this.data[y][x];\n  }\n\n  setState(x: number, y: number, state: CellState): void {\n    this.data[y][x] = state;\n  }\n}\n","import { CellState } from './cellState';\nimport { GameBoard } from './gameBoard';\n\nexport class GameOfLife {\n  private primaryBoard: GameBoard;\n  private secondaryBoard: GameBoard;\n\n  constructor(width: number, height: number) {\n    this.primaryBoard = new GameBoard(width, height);\n    this.secondaryBoard = new GameBoard(width, height);\n  }\n\n  update(): this {\n    const { primaryBoard: board, secondaryBoard: nextBoard } = this;\n\n    for (let x = 0; x < board.width; x++) {\n      for (let y = 0; y < board.height; y++) {\n        const neighbours = board.countNeighbours(x, y);\n\n        if (neighbours === 2) {\n          nextBoard.setState(x, y, board.getState(x, y));\n        } else if (neighbours === 3) {\n          nextBoard.setState(x, y, CellState.Alive);\n        } else {\n          nextBoard.setState(x, y, CellState.Dead);\n        }\n      }\n    }\n\n    this.primaryBoard = nextBoard;\n    this.secondaryBoard = board;\n\n    return this;\n  }\n\n  getBoard(): GameBoard {\n    return this.primaryBoard;\n  }\n}\n","import { CellState } from './cellState';\nimport { GameBoard } from './gameBoard';\n\nexport class Renderer {\n  private ctx: CanvasRenderingContext2D;\n\n  constructor(canvas: HTMLCanvasElement) {\n    const ctx = canvas.getContext('2d');\n\n    ctx.scale(2, 2);\n    ctx.imageSmoothingEnabled = false;\n\n    this.ctx = ctx;\n  }\n\n  render(gameBoard: GameBoard): void {\n    const imageData = this.ctx.getImageData(\n      0,\n      0,\n      gameBoard.width,\n      gameBoard.height\n    );\n\n    for (let y = 0; y < gameBoard.height; y++) {\n      for (let x = 0; x < gameBoard.width; x++) {\n        let index = (y * gameBoard.width + x) * 4;\n\n        if (gameBoard.getState(x, y) === CellState.Alive) {\n          imageData.data[index] = 255;\n          imageData.data[++index] = 255;\n          imageData.data[++index] = 255;\n        } else {\n          imageData.data[index] = 0;\n          imageData.data[++index] = 0;\n          imageData.data[++index] = 0;\n        }\n\n        imageData.data[++index] = 255;\n      }\n    }\n\n    this.ctx.putImageData(imageData, 0, 0);\n    this.ctx.drawImage(this.ctx.canvas, 0, 0);\n  }\n}\n","import { CellState } from './cellState';\nimport { GameBoard } from './gameBoard';\nimport { GameLoop } from './gameLoop';\nimport { GameOfLife } from './gameOfLife';\nimport { Renderer } from './renderer';\n\nfunction shuffle(board: GameBoard) {\n  for (let y = 0; y < board.height; y++) {\n    for (let x = 0; x < board.width; x++) {\n      board.setState(\n        x,\n        y,\n        Math.floor(Math.random() * 10) ? CellState.Dead : CellState.Alive\n      );\n    }\n  }\n}\n\nwindow.addEventListener('DOMContentLoaded', function () {\n  const WIDTH = 500;\n  const HEIGHT = 500;\n\n  const canvas = document.getElementById('canvas') as HTMLCanvasElement;\n  canvas.height = HEIGHT;\n  canvas.width = WIDTH;\n\n  const renderer = new Renderer(canvas);\n  const game = new GameOfLife(250, 250);\n  shuffle(game.getBoard());\n\n  const loop = new GameLoop(game, renderer);\n\n  document.getElementById('toggle-button').onclick = function () {\n    loop.toggle();\n  };\n\n  document.getElementById('step-button').onclick = function () {\n    loop.stop();\n    loop.tick();\n  };\n\n  document.getElementById('restart-button').onclick = function () {\n    shuffle(game.getBoard());\n  };\n});\n"]}